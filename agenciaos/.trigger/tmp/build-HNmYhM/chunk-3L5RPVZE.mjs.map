{
  "version": 3,
  "sources": ["../../../src/trigger/simple-jobs.ts"],
  "sourcesContent": ["// Simulação temporária dos jobs do Trigger.dev\n// Para reativar o Trigger.dev, descomente o código abaixo e instale '@trigger.dev/sdk'\n\nexport interface JobResult {\n  success: boolean;\n  result?: string;\n  action?: string;\n  event?: string;\n  customerId?: string;\n  report?: string;\n  timestamp: string;\n  agencies?: number;\n}\n\nexport const simpleAIJob = {\n  id: \"simple-ai-job\",\n  trigger: async (payload: { agencyId: string; content: string }): Promise<{ id: string }> => {\n    console.log(`[SIMULAÇÃO] Processando IA para agência ${payload.agencyId}`);\n    \n    // Simulação do processamento\n    setTimeout(async () => {\n      console.log(`IA processada para: ${payload.content}`);\n    }, 1000);\n    \n    return {\n      id: `job-${Date.now()}`,\n    };\n  },\n};\n\nexport const simpleWebhookJob = {\n  id: \"simple-webhook-job\",\n  trigger: async (payload: { event: string; customerId: string }): Promise<{ id: string }> => {\n    console.log(`[SIMULAÇÃO] Webhook recebido: ${payload.event} para ${payload.customerId}`);\n    \n    // Simulação do processamento\n    setTimeout(async () => {\n      console.log(`Webhook processado: ${payload.event}`);\n    }, 500);\n    \n    return {\n      id: `webhook-${Date.now()}`,\n    };\n  },\n};\n\nexport const simpleReportJob = {\n  id: \"simple-report-job\",\n  trigger: async (): Promise<{ id: string }> => {\n    console.log(\"[SIMULAÇÃO] Gerando relatório simples\");\n    \n    // Simulação do processamento\n    setTimeout(async () => {\n      console.log(\"Relatório gerado com sucesso\");\n    }, 2000);\n    \n    return {\n      id: `report-${Date.now()}`,\n    };\n  },\n};\n\n/* \nPARA REATIVAR O TRIGGER.DEV:\n\n1. Instalar dependência:\n   npm install @trigger.dev/sdk@latest\n\n2. Substituir o código acima por:\n\nimport { task } from \"@trigger.dev/sdk/v3\";\n\nexport const simpleAIJob = task({\n  id: \"simple-ai-job\",\n  maxDuration: 60,\n  retry: { maxAttempts: 2 },\n  run: async (payload: { agencyId: string; content: string }) => {\n    console.log(`Processando IA para agência ${payload.agencyId}`);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      success: true,\n      result: `IA processada para: ${payload.content}`,\n      timestamp: new Date().toISOString(),\n    };\n  },\n});\n\nexport const simpleWebhookJob = task({\n  id: \"simple-webhook-job\",\n  maxDuration: 30,\n  retry: { maxAttempts: 3 },\n  run: async (payload: { event: string; customerId: string }) => {\n    console.log(`Webhook recebido: ${payload.event} para ${payload.customerId}`);\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      success: true,\n      action: \"processed\",\n      event: payload.event,\n      customerId: payload.customerId,\n      timestamp: new Date().toISOString(),\n    };\n  },\n});\n\nexport const simpleReportJob = task({\n  id: \"simple-report-job\",\n  maxDuration: 120,\n  retry: { maxAttempts: 1 },\n  run: async () => {\n    console.log(\"Gerando relatório simples\");\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return {\n      success: true,\n      report: \"Relatório gerado com sucesso\",\n      timestamp: new Date().toISOString(),\n      agencies: 5,\n    };\n  },\n});\n\n*/\n"],
  "mappings": ";;;;;AAAA;AAcO,IAAM,cAAc;AAAA,EACzB,IAAI;AAAA,EACJ,SAAS,OAAO,YAA4E;AAC1F,YAAQ,IAAI,2CAA2C,QAAQ,QAAQ,EAAE;AAGzE,eAAW,YAAY;AACrB,cAAQ,IAAI,uBAAuB,QAAQ,OAAO,EAAE;AAAA,IACtD,GAAG,GAAI;AAEP,WAAO;AAAA,MACL,IAAI,OAAO,KAAK,IAAI,CAAC;AAAA,IACvB;AAAA,EACF;AACF;AAEO,IAAM,mBAAmB;AAAA,EAC9B,IAAI;AAAA,EACJ,SAAS,OAAO,YAA4E;AAC1F,YAAQ,IAAI,iCAAiC,QAAQ,KAAK,SAAS,QAAQ,UAAU,EAAE;AAGvF,eAAW,YAAY;AACrB,cAAQ,IAAI,uBAAuB,QAAQ,KAAK,EAAE;AAAA,IACpD,GAAG,GAAG;AAEN,WAAO;AAAA,MACL,IAAI,WAAW,KAAK,IAAI,CAAC;AAAA,IAC3B;AAAA,EACF;AACF;AAEO,IAAM,kBAAkB;AAAA,EAC7B,IAAI;AAAA,EACJ,SAAS,YAAqC;AAC5C,YAAQ,IAAI,uCAAuC;AAGnD,eAAW,YAAY;AACrB,cAAQ,IAAI,8BAA8B;AAAA,IAC5C,GAAG,GAAI;AAEP,WAAO;AAAA,MACL,IAAI,UAAU,KAAK,IAAI,CAAC;AAAA,IAC1B;AAAA,EACF;AACF;",
  "names": []
}
